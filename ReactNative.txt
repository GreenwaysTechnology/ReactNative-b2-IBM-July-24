                                       React Native
.....................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to access platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

How to build mobile native apps in portable way using same javascript technology without html and css?

			   That is birth of React Native.
....................................................................................
			     React Native Architecture
....................................................................................


React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling
 -hooks
 -life cycle events
 -redux

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

ReactNative code base is classified into two category

1.User Interface
2.Application logic

In Normal react js, User interface is written using HTML language, application logic is written using plain js(react js using state,events,props)...

In React Native, User interface is written using "Mobile Elements", application logic is written using plain js(react js using state,events,props)...


UI Mark Up code for React native:

React native does not use html language to build ui elements.

React Native provides a high level ui components already written, so we can use those
components only.Why?

 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 

For that React native provides a generic components for both platforms.

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
.....................................................................................

.....................................................................................
			ReactNative Project
....................................................................................

You can setup either using React Native cli or EXPO Cli.


React Native cli:
................

Windows-Android:

Requirements:

Node js,
React Native command line interface,
JDK,
Android Studio

https://reactnative.dev/docs/environment-setup?guide=native&os=windows&platform=android


Create React Native Project using react native cli:
..................................................

npx @react-native-community/cli@latest init AwesomeProject

√ Downloading template
√ Copying template
√ Processing template
√ Installing dependencies
√ Initializing Git repository


  Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "G:\ibm\2024\july\ReactNative-b2\AwesomeProject" && npx react-native run-android

  Run instructions for Windows:
    • See https://aka.ms/ReactNativeGuideWindows for the latest up-to-date instructions.


PS G:\ibm\2024\july\ReactNative-b2> cd .\AwesomeProject\
PS G:\ibm\2024\july\ReactNative-b2\AwesomeProject>


Folders and files:

package.json

{
  "name": "AwesomeProject",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "lint": "eslint .",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "react": "18.2.0",
    "react-native": "0.74.3"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.20.0",
    "@babel/runtime": "^7.20.0",
    "@react-native/babel-preset": "0.74.85",
    "@react-native/eslint-config": "0.74.85",
    "@react-native/metro-config": "0.74.85",
    "@react-native/typescript-config": "0.74.85",
    "@types/react": "^18.2.6",
    "@types/react-test-renderer": "^18.0.0",
    "babel-jest": "^29.6.3",
    "eslint": "^8.19.0",
    "jest": "^29.6.3",
    "prettier": "2.8.8",
    "react-test-renderer": "18.2.0",
    "typescript": "5.0.4"
  },
  "engines": {
    "node": ">=18"
  },
  "packageManager": "yarn@3.6.4"
}

we have scripts to start anroid,ios,generic

How to start project

npm run android - to start and deploy on android

npm run ios - to start and deploy on ios

npm start - it list all options and later you can select

>npm run android

 Steps:
 1.compiler started to compile the code into java/kotlin code via compiler (babel)
   and metro compiler

  babel compiler converts "react code(jsx)" into plain js.

  metro compiler converts js code  into native code

Every react native project powers with "typescript" language. if y want to write code in typescript , you can other wise you can write in js.

.....................................................................................




Entry file:

index.js

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
		|
               Mounting root Component

Root Component is always App Component.

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).


React Native App= {Components + React Core Features + React Native Router}

React Native App= {Components + React Core Features + React Native Router}

Core Components:

1.View
2.Text
3.Image
4.TextInput
5.ScrollView
6.StyleSheet

User Interface:
1.Button
2.Switch

List Views:
1.FlatList
2.SectionList

Others:

1.Alert
2.ActivityIndicator
3.Modal
4.StatusBar
5.Animated
etc...


View and Text:
.............

View 

 	The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

Text 
   A React component for displaying text.

Text supports nesting, styling, and touch handling.

import { Text, View } from "react-native";



function App() {
    return <View>
            <Text>Welcome to React Native!</Text>
    </View>
}

export default App;

Pointers:

1.Every react native app  entry is App.js only
2.App component must be exported using "export default only"

.........
..................................................................................
			 Styling
..................................................................................
Styles:
.......

In react Styles are added through css, react native does not support css because no html is used.

React Native does not allow css directly, but supports indirectly via javascript..

CSS can applied to web in two ways

1.via CSS language

body {

}
#container { 

}

<div class="container"></div>

2.via javascript 
  Dynamic css.

CSS added to element dynamically after page has been rendered.

JS provides an api to add css dynamically.

anyElement.style=stylevalue

eg:
document.getElementById("myDiv").style.border = "thick solid #0000FF";

https://www.w3schools.com/jsref/dom_obj_style.asp

React native supports css via coding...
.....................................................................................
...................................................................................
			StyleSheet - Component
..................................................................................

A StyleSheet is an abstraction similar to CSS StyleSheets

How to declare style?

StyleSheet object has method called "create" method

StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

StyleSheet must follow css javascript property rules..
import { Text, View, StyleSheet } from "react-native";



function App() {
    return <View style={styles.container}>
        <Text style={styles.label}>Welcome to React Native!</Text>
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize:20,
        fontWeight:'bold',
        color:'blue'
    }
})

....................................................................................
			 Compoents and React Native
....................................................................................

In React Native every thing is component.

Types of compoents:

1.React native built in compoents
  View,Stylesheet,Text etc..

2.Custom Components
  Components are created by us


Components follows React core principles 

1.composition
2.props
3.state

Write components:

import { Text, View, StyleSheet } from "react-native";


const Welcome = props => {
    return <>
        <Text style={styles.label}>Welcome to React Native!</Text>
    </>
}


function App() {
    return <View style={styles.container}>
            <Welcome/>
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

props:
import { Text, View, StyleSheet } from "react-native";


const Welcome = ({ message = 'Welcome to React Native' }) => {
    return <>
        <Text style={styles.label}>{message}</Text>
    </>
}


function App() {
    return <View style={styles.container}>
        <Welcome />
        <Welcome message="Hello React Native!"/>

    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

Modularation:

src/components/Welcome.jsx
import { StyleSheet, Text } from "react-native"

const Welcome = ({ message = 'Welcome to React Native' }) => {
    return <>
        <Text style={styles.label}>{message}</Text>
    </>
}

const styles = StyleSheet.create({
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
export { Welcome }


src/components/index.js

import { Welcome } from "./Welcome";

export { Welcome }

src/App.js
import { View, StyleSheet } from "react-native";
import { Welcome } from "./src/components";

function App() {
    return <View style={styles.container}>
        <Welcome />
        <Welcome message="Hello React Native , How are you?" />

    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

.....................................................................................
			State and React Native
.....................................................................................
import { useState } from "react";
import { View, StyleSheet, Text, Button } from "react-native";


const Review = () => {
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <>
        <Text style={styles.label}>Like {like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}


function App() {
    return <View style={styles.container}>
        <Review />
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})


Redux Integration:

import { View, StyleSheet, Text, Button } from "react-native";
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

const initialState = {
    like: 0,
}
const ReviewSlice = createSlice({
    initialState,
    name: 'review',
    reducers: {
        increment(state, action) {
            state.like++
        }
    }
})
//extract reducer from the slice
const ReviewReducer = ReviewSlice.reducer
//extract actions from the slice
const { increment } = ReviewSlice.actions

const appStore = configureStore({
    reducer: {
        reviewReducer: ReviewReducer
    }
})

const Review = () => {
    const review = useSelector(appState => {
        return appState.reviewReducer
    })
    const dispatch = useDispatch()

    const onLike = () => {
        dispatch(increment())
    }

    return <>
        <Text style={styles.label}>Like {review.like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}


function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Review />
        </View>
    </Provider>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
....................................................................................
			API Calls, use Effect,Redux Thunk
.....................................................................................

import { View, StyleSheet, Text } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <View>
            <Text>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </View>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

After running this code , you can see the data is displyed, but not able scroll.
...................................................................................
			 Container Components
...................................................................................

Container components are components which contains other components which is called "View" in React Native.

Types of Views:

1.View
2.ScrollView
3.ListView
4.SectionList


.................................................................................
			Scroll Behaviour
.................................................................................

View is going to hold child elements, act as container
ScrollView is going hold child elements , act as container with scrollbar.

import { View, StyleSheet, Text, ScrollView } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <ScrollView>
            <Text>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </ScrollView>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
.....................................................................................
			  ScrolView
....................................................................................
import { View, StyleSheet, Text, ScrollView } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <ScrollView style={{
            marginLeft: 10,
            marginTop: 10
        }}>
            <Text style={{ textAlign: 'center', fontSize: 25, fontWeight: 'bold', marginBottom: 10 }}>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </ScrollView>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
...................................................................................
				List Views
...................................................................................

React Native provides a suit of components for presenting lists of data, Generally, You will want to use "FlatList or Section List"


FlatList:
 It displays a scrolling list of changining, but similary structured data.
 FlatList works well for long list of data , where number of items change over time.
 
When compare to ScrollView,The FlatList only renders elements that are currently s howing on the screen, not all the elements at onces.



FlatList is similar to array.map in react.

FlatList requires two properties:

1.data
  data Source
2.renderItem
  takes one item from the source and returns a formtted component to render.

FlatList with HardCoded data.
.............................
<FlatList data={dataSource} renderItem={(obj)=>{
  return<Text>{obj.item.dataSource.property}</Text>
}}

data->Data Prop is called datasource which is plain array
renderItem -
  Takes an item from data prop and renders it into list

renderItem({
 item:ItemObject(todo,contact),
 index:number,
 separators:{

 }
})

import { View, StyleSheet, Text, ScrollView, FlatList } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
.....................................................................................
			  Item selection in flat List

import { View, StyleSheet, Text, ScrollView, FlatList, Alert } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label} onPress={() => {
            onSelectItem(obj.item)
        }}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

...................................................................................
			 Spinner - ActivityIndicator
...................................................................................
Displays a circular loading indicator.


import { View, StyleSheet, Text,  FlatList, Alert, ActivityIndicator } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        //Todo: Remove settimeout after testing of loader
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <ActivityIndicator size="large" color="#00ff00" />


    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label} onPress={() => {
            onSelectItem(obj.item)
        }}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

....................................................................................
			 Select Item with Touchable Features
.....................................................................................

In order to add touchable features , react native offers many components

1.TouchableHighlight
2.TouchableOpacity
3.TouchableWithoutFeedBack


import { View, StyleSheet, Text, FlatList, Alert, ActivityIndicator, TouchableHighlight } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        //Todo: Remove settimeout after testing of loader
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <ActivityIndicator size="large" color="#00ff00" />


    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <TouchableHighlight activeOpacity={0.4} underlayColor={'lightblue'} onPress={() => {
            onSelectItem(obj.item)
        }}>
            <Text style={styles.label} >
                {obj.item.title}
            </Text>
        </TouchableHighlight>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

.....................................................................................
			Section List
.....................................................................................
It is special List which shows data based on category, showing nested array.

<SectionList sections={list} renderItem={} renderSectionHeader={} keyExtractor={}/>



import { useEffect, useState } from "react";
import { StyleSheet, View, Text, FlatList, ActivityIndicator, Alert, TouchableHighlight, SectionList } from "react-native";

//data:
const COURSELIST = [
    {
        title: 'User Interface',
        data: [
            'HTML',
            'CSS',
            'Android',
            'IOS',
            'Javascript'
        ]
    },
    {
        title: 'Backend',
        data: [
            'JAVA',
            'C#',
            'Microservices',
            'Python',
            'Javascript'
        ]

    },
]

const Course = props => {

    return <View>
        <SectionList
            sections={COURSELIST}
            renderItem={({ item }) => {
                return <Text>{item}</Text>
            }}
            renderSectionHeader={({ section: { title } }) => {
                return <Text style={styles.lable}>{title}</Text>
            }}
            keyExtractor={(item, index) => {
                return item + index
            }}

        />
    </View>
}


function App() {
    return <View style={styles.container}>
        <Course />
    </View>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        padding: 10,
        alignItems: 'center',
        justifyContent: 'center'
    },
    lable: {
        marginLeft: 5,
        color: 'blue',
        fontFamily: "Arial, Helvetica, sans-serif",
        fontWeight: 'bold',
        fontSize: 20
    }
})
.....................................................................................
...............................................................................
			ImageBackground
...................................................................................

import React from 'react';
import {ImageBackground, StyleSheet, Text, View} from 'react-native';

const image = {uri: 'https://legacy.reactjs.org/logo-og.png'};

const App = () => (
  <View style={styles.container}>
    <ImageBackground source={image} resizeMode="cover" style={styles.image}>
      <Text style={styles.text}>Inside</Text>
    </ImageBackground>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  image: {
    flex: 1,
    justifyContent: 'center',
  },
  text: {
    color: 'white',
    fontSize: 42,
    lineHeight: 84,
    fontWeight: 'bold',
    textAlign: 'center',
    backgroundColor: '#000000c0',
  },
});

export default App;
.....................................................................................
.....................................................................................
			How to get Input from the User
				TextInput
....................................................................................

A foundatinonal Component for inputting text into the app via keyboard.

Features:

1.auto correction
2.auto capitalization
3.placeholder text
4.numeric keypad
5.Password fiedls

import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, Button, Alert } from 'react-native';

const TextInputComponent = () => {
    const [text, onChangeText] = useState('Welcome')
    const [number, onChangeNumber] = useState(0)

    return <View>
        <TextInput style={styles.input} value={text} onChangeText={onChangeText} />
        <Button title='Show Text' onPress={() => {
            Alert.alert(text)
        }} />
        <TextInput keyboardType="numeric" style={styles.input} value={number} onChangeText={onChangeNumber} />
        <Button title='Show Number' onPress={() => {
            let a = 100
            let result = a * parseInt(number)
            Alert.alert(result.toString())
        }} />
    </View>
}

const App = () => (
    <View style={styles.container}>
        <TextInputComponent />
    </View>
);

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    },
    input: {
        height: 40,
        margin: 12,
        borderWidth: 1,
        padding: 10
    }
});

export default App;
....................................................................................
				Layouts
...................................................................................


