                                       React Native
.....................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to access platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

How to build mobile native apps in portable way using same javascript technology without html and css?

			   That is birth of React Native.
....................................................................................
			     React Native Architecture
....................................................................................


React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling
 -hooks
 -life cycle events
 -redux

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

ReactNative code base is classified into two category

1.User Interface
2.Application logic

In Normal react js, User interface is written using HTML language, application logic is written using plain js(react js using state,events,props)...

In React Native, User interface is written using "Mobile Elements", application logic is written using plain js(react js using state,events,props)...


UI Mark Up code for React native:

React native does not use html language to build ui elements.

React Native provides a high level ui components already written, so we can use those
components only.Why?

 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 

For that React native provides a generic components for both platforms.

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
.....................................................................................

.....................................................................................
			ReactNative Project
....................................................................................

You can setup either using React Native cli or EXPO Cli.


React Native cli:
................

Windows-Android:

Requirements:

Node js,
React Native command line interface,
JDK,
Android Studio

https://reactnative.dev/docs/environment-setup?guide=native&os=windows&platform=android


Create React Native Project using react native cli:
..................................................

npx @react-native-community/cli@latest init AwesomeProject

√ Downloading template
√ Copying template
√ Processing template
√ Installing dependencies
√ Initializing Git repository


  Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "G:\ibm\2024\july\ReactNative-b2\AwesomeProject" && npx react-native run-android

  Run instructions for Windows:
    • See https://aka.ms/ReactNativeGuideWindows for the latest up-to-date instructions.


PS G:\ibm\2024\july\ReactNative-b2> cd .\AwesomeProject\
PS G:\ibm\2024\july\ReactNative-b2\AwesomeProject>


Folders and files:

package.json

{
  "name": "AwesomeProject",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "android": "react-native run-android",
    "ios": "react-native run-ios",
    "lint": "eslint .",
    "start": "react-native start",
    "test": "jest"
  },
  "dependencies": {
    "react": "18.2.0",
    "react-native": "0.74.3"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@babel/preset-env": "^7.20.0",
    "@babel/runtime": "^7.20.0",
    "@react-native/babel-preset": "0.74.85",
    "@react-native/eslint-config": "0.74.85",
    "@react-native/metro-config": "0.74.85",
    "@react-native/typescript-config": "0.74.85",
    "@types/react": "^18.2.6",
    "@types/react-test-renderer": "^18.0.0",
    "babel-jest": "^29.6.3",
    "eslint": "^8.19.0",
    "jest": "^29.6.3",
    "prettier": "2.8.8",
    "react-test-renderer": "18.2.0",
    "typescript": "5.0.4"
  },
  "engines": {
    "node": ">=18"
  },
  "packageManager": "yarn@3.6.4"
}

we have scripts to start anroid,ios,generic

How to start project

npm run android - to start and deploy on android

npm run ios - to start and deploy on ios

npm start - it list all options and later you can select

>npm run android

 Steps:
 1.compiler started to compile the code into java/kotlin code via compiler (babel)
   and metro compiler

  babel compiler converts "react code(jsx)" into plain js.

  metro compiler converts js code  into native code

Every react native project powers with "typescript" language. if y want to write code in typescript , you can other wise you can write in js.

.....................................................................................




Entry file:

index.js

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
		|
               Mounting root Component

Root Component is always App Component.

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).


React Native App= {Components + React Core Features + React Native Router}

React Native App= {Components + React Core Features + React Native Router}

Core Components:

1.View
2.Text
3.Image
4.TextInput
5.ScrollView
6.StyleSheet

User Interface:
1.Button
2.Switch

List Views:
1.FlatList
2.SectionList

Others:

1.Alert
2.ActivityIndicator
3.Modal
4.StatusBar
5.Animated
etc...


View and Text:
.............

View 

 	The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

Text 
   A React component for displaying text.

Text supports nesting, styling, and touch handling.

import { Text, View } from "react-native";



function App() {
    return <View>
            <Text>Welcome to React Native!</Text>
    </View>
}

export default App;

Pointers:

1.Every react native app  entry is App.js only
2.App component must be exported using "export default only"

.........
..................................................................................
			 Styling
..................................................................................
Styles:
.......

In react Styles are added through css, react native does not support css because no html is used.

React Native does not allow css directly, but supports indirectly via javascript..

CSS can applied to web in two ways

1.via CSS language

body {

}
#container { 

}

<div class="container"></div>

2.via javascript 
  Dynamic css.

CSS added to element dynamically after page has been rendered.

JS provides an api to add css dynamically.

anyElement.style=stylevalue

eg:
document.getElementById("myDiv").style.border = "thick solid #0000FF";

https://www.w3schools.com/jsref/dom_obj_style.asp

React native supports css via coding...
.....................................................................................
...................................................................................
			StyleSheet - Component
..................................................................................

A StyleSheet is an abstraction similar to CSS StyleSheets

How to declare style?

StyleSheet object has method called "create" method

StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

StyleSheet must follow css javascript property rules..
import { Text, View, StyleSheet } from "react-native";



function App() {
    return <View style={styles.container}>
        <Text style={styles.label}>Welcome to React Native!</Text>
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize:20,
        fontWeight:'bold',
        color:'blue'
    }
})

....................................................................................
			 Compoents and React Native
....................................................................................

In React Native every thing is component.

Types of compoents:

1.React native built in compoents
  View,Stylesheet,Text etc..

2.Custom Components
  Components are created by us


Components follows React core principles 

1.composition
2.props
3.state

Write components:

import { Text, View, StyleSheet } from "react-native";


const Welcome = props => {
    return <>
        <Text style={styles.label}>Welcome to React Native!</Text>
    </>
}


function App() {
    return <View style={styles.container}>
            <Welcome/>
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

props:
import { Text, View, StyleSheet } from "react-native";


const Welcome = ({ message = 'Welcome to React Native' }) => {
    return <>
        <Text style={styles.label}>{message}</Text>
    </>
}


function App() {
    return <View style={styles.container}>
        <Welcome />
        <Welcome message="Hello React Native!"/>

    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

Modularation:

src/components/Welcome.jsx
import { StyleSheet, Text } from "react-native"

const Welcome = ({ message = 'Welcome to React Native' }) => {
    return <>
        <Text style={styles.label}>{message}</Text>
    </>
}

const styles = StyleSheet.create({
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
export { Welcome }


src/components/index.js

import { Welcome } from "./Welcome";

export { Welcome }

src/App.js
import { View, StyleSheet } from "react-native";
import { Welcome } from "./src/components";

function App() {
    return <View style={styles.container}>
        <Welcome />
        <Welcome message="Hello React Native , How are you?" />

    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

.....................................................................................
			State and React Native
.....................................................................................
import { useState } from "react";
import { View, StyleSheet, Text, Button } from "react-native";


const Review = () => {
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <>
        <Text style={styles.label}>Like {like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}


function App() {
    return <View style={styles.container}>
        <Review />
    </View>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})


Redux Integration:

import { View, StyleSheet, Text, Button } from "react-native";
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

const initialState = {
    like: 0,
}
const ReviewSlice = createSlice({
    initialState,
    name: 'review',
    reducers: {
        increment(state, action) {
            state.like++
        }
    }
})
//extract reducer from the slice
const ReviewReducer = ReviewSlice.reducer
//extract actions from the slice
const { increment } = ReviewSlice.actions

const appStore = configureStore({
    reducer: {
        reviewReducer: ReviewReducer
    }
})

const Review = () => {
    const review = useSelector(appState => {
        return appState.reviewReducer
    })
    const dispatch = useDispatch()

    const onLike = () => {
        dispatch(increment())
    }

    return <>
        <Text style={styles.label}>Like {review.like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}


function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Review />
        </View>
    </Provider>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
....................................................................................
			API Calls, use Effect,Redux Thunk
.....................................................................................

import { View, StyleSheet, Text } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <View>
            <Text>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </View>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

After running this code , you can see the data is displyed, but not able scroll.
...................................................................................
			 Container Components
...................................................................................

Container components are components which contains other components which is called "View" in React Native.

Types of Views:

1.View
2.ScrollView
3.ListView
4.SectionList


.................................................................................
			Scroll Behaviour
.................................................................................

View is going to hold child elements, act as container
ScrollView is going hold child elements , act as container with scrollbar.

import { View, StyleSheet, Text, ScrollView } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <ScrollView>
            <Text>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </ScrollView>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
.....................................................................................
			  ScrolView
....................................................................................
import { View, StyleSheet, Text, ScrollView } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,

}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return (
        <ScrollView style={{
            marginLeft: 10,
            marginTop: 10
        }}>
            <Text style={{ textAlign: 'center', fontSize: 25, fontWeight: 'bold', marginBottom: 10 }}>Blog Posts</Text>
            {entities.map((post) => (
                <Text key={post.id}>{post.title}</Text>
            ))}
        </ScrollView>
    )
}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
...................................................................................
				List Views
...................................................................................

React Native provides a suit of components for presenting lists of data, Generally, You will want to use "FlatList or Section List"


FlatList:
 It displays a scrolling list of changining, but similary structured data.
 FlatList works well for long list of data , where number of items change over time.
 
When compare to ScrollView,The FlatList only renders elements that are currently s howing on the screen, not all the elements at onces.



FlatList is similar to array.map in react.

FlatList requires two properties:

1.data
  data Source
2.renderItem
  takes one item from the source and returns a formtted component to render.

FlatList with HardCoded data.
.............................
<FlatList data={dataSource} renderItem={(obj)=>{
  return<Text>{obj.item.dataSource.property}</Text>
}}

data->Data Prop is called datasource which is plain array
renderItem -
  Takes an item from data prop and renders it into list

renderItem({
 item:ItemObject(todo,contact),
 index:number,
 separators:{

 }
})

import { View, StyleSheet, Text, ScrollView, FlatList } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
.....................................................................................
			  Item selection in flat List

import { View, StyleSheet, Text, ScrollView, FlatList, Alert } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <Text style={styles.label}>Loading...</Text>

    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label} onPress={() => {
            onSelectItem(obj.item)
        }}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

...................................................................................
			 Spinner - ActivityIndicator
...................................................................................
Displays a circular loading indicator.


import { View, StyleSheet, Text,  FlatList, Alert, ActivityIndicator } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        //Todo: Remove settimeout after testing of loader
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <ActivityIndicator size="large" color="#00ff00" />


    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label} onPress={() => {
            onSelectItem(obj.item)
        }}>
            {obj.item.title}
        </Text>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

....................................................................................
			 Select Item with Touchable Features
.....................................................................................

In order to add touchable features , react native offers many components

1.TouchableHighlight
2.TouchableOpacity
3.TouchableWithoutFeedBack


import { View, StyleSheet, Text, FlatList, Alert, ActivityIndicator, TouchableHighlight } from "react-native";
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})
function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        //Todo: Remove settimeout after testing of loader
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <ActivityIndicator size="large" color="#00ff00" />


    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <TouchableHighlight activeOpacity={0.4} underlayColor={'lightblue'} onPress={() => {
            onSelectItem(obj.item)
        }}>
            <Text style={styles.label} >
                {obj.item.title}
            </Text>
        </TouchableHighlight>
    }} />

}

function App() {
    return <Provider store={appStore}>
        <View style={styles.container}>
            <Post />
        </View>
    </Provider>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

.....................................................................................
			Section List
.....................................................................................
It is special List which shows data based on category, showing nested array.

<SectionList sections={list} renderItem={} renderSectionHeader={} keyExtractor={}/>



import { useEffect, useState } from "react";
import { StyleSheet, View, Text, FlatList, ActivityIndicator, Alert, TouchableHighlight, SectionList } from "react-native";

//data:
const COURSELIST = [
    {
        title: 'User Interface',
        data: [
            'HTML',
            'CSS',
            'Android',
            'IOS',
            'Javascript'
        ]
    },
    {
        title: 'Backend',
        data: [
            'JAVA',
            'C#',
            'Microservices',
            'Python',
            'Javascript'
        ]

    },
]

const Course = props => {

    return <View>
        <SectionList
            sections={COURSELIST}
            renderItem={({ item }) => {
                return <Text>{item}</Text>
            }}
            renderSectionHeader={({ section: { title } }) => {
                return <Text style={styles.lable}>{title}</Text>
            }}
            keyExtractor={(item, index) => {
                return item + index
            }}

        />
    </View>
}


function App() {
    return <View style={styles.container}>
        <Course />
    </View>
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        padding: 10,
        alignItems: 'center',
        justifyContent: 'center'
    },
    lable: {
        marginLeft: 5,
        color: 'blue',
        fontFamily: "Arial, Helvetica, sans-serif",
        fontWeight: 'bold',
        fontSize: 20
    }
})
.....................................................................................
...............................................................................
			ImageBackground
...................................................................................

import React from 'react';
import {ImageBackground, StyleSheet, Text, View} from 'react-native';

const image = {uri: 'https://legacy.reactjs.org/logo-og.png'};

const App = () => (
  <View style={styles.container}>
    <ImageBackground source={image} resizeMode="cover" style={styles.image}>
      <Text style={styles.text}>Inside</Text>
    </ImageBackground>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  image: {
    flex: 1,
    justifyContent: 'center',
  },
  text: {
    color: 'white',
    fontSize: 42,
    lineHeight: 84,
    fontWeight: 'bold',
    textAlign: 'center',
    backgroundColor: '#000000c0',
  },
});

export default App;
.....................................................................................
.....................................................................................
			How to get Input from the User
				TextInput
....................................................................................

A foundatinonal Component for inputting text into the app via keyboard.

Features:

1.auto correction
2.auto capitalization
3.placeholder text
4.numeric keypad
5.Password fiedls

import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, Button, Alert } from 'react-native';

const TextInputComponent = () => {
    const [text, onChangeText] = useState('Welcome')
    const [number, onChangeNumber] = useState(0)

    return <View>
        <TextInput style={styles.input} value={text} onChangeText={onChangeText} />
        <Button title='Show Text' onPress={() => {
            Alert.alert(text)
        }} />
        <TextInput keyboardType="numeric" style={styles.input} value={number} onChangeText={onChangeNumber} />
        <Button title='Show Number' onPress={() => {
            let a = 100
            let result = a * parseInt(number)
            Alert.alert(result.toString())
        }} />
    </View>
}

const App = () => (
    <View style={styles.container}>
        <TextInputComponent />
    </View>
);

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    },
    input: {
        height: 40,
        margin: 12,
        borderWidth: 1,
        padding: 10
    }
});

export default App;
....................................................................................
			Stylesheet - Layouts
.....................................................................................
Height and Width:
................
 How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".

if it is box which has some basic properties
1.height
2.width
3.space values
  3.1.margins-space allocated outside box
  3.2.padding-space allocated inside box.

A Component's height and width determine its size on the screen.

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.


In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - responsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.


Eg:
import { Text, View } from "react-native";

const App = () => {
    return <View>
        <View style={{
            width: 50,
            height: 50,
            backgroundColor: 'blue'
        }} />
        <View style={{
            width: 100,
            height: 100,
            backgroundColor: 'skyblue'
        }} />
        <View style={{
            width: 150,
            height: 150,
            backgroundColor: 'red'

        }} />
    </View>
}
export default App;

...................................................................................
Percentage Dimensions:

 It is similar to responsive web design

=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.

Eg:
import { View } from "react-native";

const App = () => {
    return <View style={{ width: '100%', height: '100%', backgroundColor: 'pink' }}>
        {/* Child elements */}
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View>
}
export default App;

...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 

				Flex box layout
...................................................................................
React Native supports flex box layout by default..


Core Concepts of FlexBox:
........................

Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 
  Space will be divided according to each element's flex property..

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are calculated automatically.

<View style={{flex:1}}>
  <View/>

</View>
How to activate the flex layout?
  Flex layout is activated inside every react native element by default

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>

Here flex:1 is eq to 100% of screen width.
lets say the screen width is 120px then screen width is calculated automatically

The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

eg:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
....................................................................................
			 Nested Container
...................................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 2, backgroundColor: 'blue' }} />
        <View style={{ flex: 3, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink'
    }
})
.....................................................................................
			   Flex direction Properties
....................................................................................

flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.

Column:
.......
 Column is default direction property.

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: 'pink'
    }
})

Row:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        backgroundColor: 'pink'
    }
})

Column Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column-reverse',
        backgroundColor: 'pink'
    }
})
Row Reverse:
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row-reverse',
        backgroundColor: 'pink'
    }
})
.....................................................................................
				Layout Direction
.....................................................................................
Layout direction represents the direction in which children and text in hierarchy should be laid out. Layout Direction also affects what edge start and end refers

By default React native lays out With LTR(Left to Right) layout

LTR:
  Text and Children are laid out from left to right.
  Margin and padding applied to the start of an element are applied on the left side.

RTL:
  Text and Children are laid out from right to left.
  Margin and padding applied to the start of an element are applied on the right   side.

....................................................................................
....................................................................................
			Aligning Child elements(Flex Items)
....................................................................................

In order to align flex items within container we have properties

1.Justify content
2.Align items
3.Align self
4.Align Content
5.Flex wrap

Justify Content:
................

Justify content:
  Align flex items within the main axis(x axis) of their container.

Flex Direction says that how to organize either row or column

justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'


Flex Direction: row,column,row-reverse,column-reverse + flex-start
...................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'flex-start',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + flex-end
...................................................................

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'flex-end',
        backgroundColor: 'pink'
    }
})
.....................................................................................
Flex Direction: row,column,row-reverse,column-reverse + center
...................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'center',
        backgroundColor: 'pink'
    }
})
Flex Direction: row,column,row-reverse,column-reverse + space-between.

  Evenly space off children across the container's main axis,
distributing the remaining space between the children.

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-between',
        backgroundColor: 'pink'
    }
})
....................................................................................
Flex Direction: row,column,row-reverse,column-reverse + space-around

  Evenly space off children across the container's main axis,
distributing the remaining space around the children.
  Compared to space-between and space around will result in space being distributed to the begining of first child and end of the last child.


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-around',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + space-evenly

Evenly distribute children within the alignment container along the main axis.
The spacing between each pair of adjacent items, the main-start edge and the first item, and the main end edge and the last item, are all exactly the same.

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        flexDirection: 'row-reverse',
        justifyContent: 'space-evenly',
        backgroundColor: 'pink'
    }
})
.....................................................................................
Align items:
...........

Align Items describes how to align children along with cross axis(y) of the container.
It is similar to JustifyContent but instead of applying to the main axis, alignItems applies to the cross axis.

AlignItems: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

stretch:
 It is default value , Stretch children of a container to match the "height" of the container's cross axis

Flex Direction: row,column,row-reverse,column-reverse + stretch.


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        {/* <View style={{ width: 50, height: 50, backgroundColor: 'green' }} /> */}
        <View style={{ height: 100, backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }} />
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // flexDirection: 'column',
        //flexDirection: 'row',
        //flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        alignItems: 'stretch',
        backgroundColor: 'pink'
    }
})
...................

Flex Direction: row,column,row-reverse,column-reverse + flex-start


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        flexDirection: 'column-reverse',
        //flexDirection: 'row-reverse',
        alignItems: 'flex-start',
        backgroundColor: 'pink'
    }
})
...................................................................................

Flex Direction: row,column,row-reverse,column-reverse + flex-end


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        //flexDirection: 'column',
        //flexDirection: 'row',
        flexDirection: 'column-reverse',
        //flexDirection: 'row-reverse',
        alignItems: 'flex-end',
        backgroundColor: 'pink'
    }
})

Flex Direction: row,column,row-reverse,column-reverse + center


import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        //flexDirection: 'row',
        // flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        alignItems: 'center',
        backgroundColor: 'pink'
    }
})
.....................................................................................
			 Align Items + Justify Content
.....................................................................................
import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
        <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'column',
        //flexDirection: 'row',
        // flexDirection: 'column-reverse',
        // flexDirection: 'row-reverse',
        //alignItems: 'center',
        //justifyContent: 'space-evenly',
        justifyContent: 'flex-start',
        alignItems: 'center',
        backgroundColor: 'pink'
    }
})
.....................................................................................
.....................................................................................
			Align self - child element 
....................................................................................
Align self is similar to Align items and justify content but align self is going to have power child elements can controler their alignments.
align self can override the values set by alignItems.


Elements can align itself.

alignSelf: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

import { StyleSheet, View } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <View style={{
            alignSelf: 'stretch',
            width: 'auto',
            minWidth: 50,
            height: 50,
            width: 50,
            backgroundColor: 'red',
        }}

        />
        <View style={{
            backgroundColor: 'skyblue', alignSelf: 'center', height: 50,
            width: 50
        }} />
        <View style={{
            height: 50,
            width: 50, backgroundColor: 'steelblue', alignSelf: 'flex-end'
        }} />

    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        height: 60,
    }
})
...................................................................................
			Flex wrap
..................................................................................\
if more childrens beyond container size, it starts overflow, in order avoid overflow
meaning that you want to lay elements within container... we can use flex wrap.

import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />


        </ View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'center',
        marginBottom: 24
    }

})

....................................................................................
				Gap
....................................................................................

How to allocate space among elements?

 Flex gap
 =>Column gap
 =>Row gap				


import { StyleSheet, View, Text } from "react-native";

const App = () => {
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />

            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />


        </ View>
    </View>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexDirection: 'row',
        flexWrap: 'wrap',
        rowGap: 10,
        columnGap: 10,
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 24
    }

})

Guidelins, you can use for layout design
https://yogalayout.com/
https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c.
.....................................................................................
.....................................................................................	
			 React Native Navigation
....................................................................................
			
How navigation works?

In a web browser, you can link to different pages using an anchor (<a>) tag. When the user clicks on a link, the URL is pushed to the browser history stack.

 When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page.

React Native doesn't have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.

React Native Navigation's stack navigator provides a way for your app to transition between screens and manage navigation history.

If your app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state - your app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens. 

A key difference between how this works in a web browser and in React Navigation is that React Navigation's stack navigator provides the gestures and animations that you would expect on Android and iOS when navigating between routes in the stack.

Core concepts in React Native Navigation:
.........................................

1.Screen
   =>It is a special component,which only display Userinterface, not having any logic      It acts container.
2.Component
   => It is component having biz logic and ui logic...


Getting Started:

create new project:

npx react-native@latest init NavigationApp

in case your project is in "React Native cli"
in case your project is in "Expo work flow"

Common for both projects:

npm install @react-navigation/native @react-navigation/native-stack

For Bare React Native project:

npm install react-native-screens react-native-safe-area-context


For Expo Managed Projects
npx expo install react-native-screens react-native-safe-area-context

React Navigation container or parent object is "Navigation Container".


...................................................................................
...................................................................................
				Multi screen-Page
.................................................................................

Types of navigation:
1.screen to screen - stack navigation -  @react-navigation/stack
2.Tab - tab based navivation.  @react-navigation/bottom-tabs
3.Drawer -Drawer navigation.   @react-navigation/drawer


Stack Navigation:

Moving among screens: How to move from one screen to another screen?

StackNavigator :
 
 Object used to navigate between screen.

 Stack Object used to  represent stack navigator.

import { createNativeStackNavigator } from "@react-navigation/native-stack";//create 
Stack Object
const Stack  = createNativeStackNavigator();
console.log(Stack)

Object {
  "Navigator": [Function StackNavigator],
  "Screen": [Function Screen],
}


1.createStackNavigator is a function that returns an object containing 2 properties: Screen and Navigator.
2.Both of them are React components used for configuring the navigator.
The Navigator should contain Screen elements as its children to define the configuration for routes.

3.NavigationContainer is a component which manages our navigation tree and contains the navigation state. This component must wrap all navigators structure. Usually, we'd render this component at the root of our app, which is usually the component exported from App.js.


import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text } from 'react-native'

const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = () => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Home Screen</Text>
</View>

const ProfileScreen = () => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
</View>

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
        <Stack.Screen name="Home" component={HomeScreen} />

        <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    }
})
..................................................................................
			   How to move between screens
..................................................................................

Navigating to a new screen​

Every Component receives information from the parent component as a prop.
When component is rendered via route,React Navigator injects an object called "Navigation" Object as prop to every Component


Props;
Object {
  "navigation": Object {
    "addListener": [Function addListener],
    "canGoBack": [Function canGoBack],
    "dispatch": [Function dispatch],
    "getId": [Function getId],
    "getParent": [Function getParent],
    "getState": [Function anonymous],
    "goBack": [Function anonymous],
    "isFocused": [Function isFocused],
    "navigate": [Function anonymous],
    "pop": [Function anonymous],
    "popToTop": [Function anonymous],
    "push": [Function anonymous],
    "removeListener": [Function removeListener],
    "replace": [Function anonymous],
    "reset": [Function anonymous],
    "setOptions": [Function setOptions],
    "setParams": [Function anonymous],
  },
  "route": Object {
    "key": "Home-V-z_dGCJfqcHgNXxzxRGK",
    "name": "Home",
    "params": undefined,
  },


import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button } from 'react-native'

const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = (props) => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Home Screen</Text>
    <Button title="Profile" onPress={() => {
        props.navigation.navigate('Profile')
    }} />
</View>

const ProfileScreen = () => <View style={styles.container}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
</View>

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    }
})
.....................................................................................
			Passing parameters screen to screen
.....................................................................................
import { View, StyleSheet, Text, Button } from "react-native";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";//create 

//screen navigation: screen to screen.
//Create Stack Object
const Stack = createNativeStackNavigator()

//Component- Screen
const HomeScreen = props => {

    const onMove = () => {
        //write logic to navigate from this screen into another screen(profile)
        props.navigation.navigate("Profile", { id: 1, name: 'Subramanian' })
    }

    return <View style={styles.container}>
        <Text style={styles.label}>Home Screen</Text>
        <Button title="Profile" onPress={onMove} />
    </View>
}
const ProfileScreen = props => {
    const profile = props.route.params
    return <View style={styles.container}>
        <Text style={styles.label}>Profile Screen</Text>
        <Text style={styles.label}>{profile.id} {profile.name}</Text>
    </View>
}


function App() {
    return <NavigationContainer>
        {/* Stack Navigation */}
        <Stack.Navigator>
            {/* List of Screen */}
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Profile" component={ProfileScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}

export default App;

//styles
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})
.....................................................................................
			Master details page- web service integration
....................................................................................
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator } from 'react-native'
import { useState, useEffect } from "react";

const Stack = createNativeStackNavigator();

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}

const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}

const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}

//Screens 
//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Posts')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Posts" onPress={onMove} />
    </View>
}

const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {
    const { title, body } = props.route.params
    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
.....................................................................................

.....................................................................................				Configuring the Header Bar
....................................................................................

Header Title:
 By default header title is name of the Route


 <Stack.Screen name="Home" component={Home} />

How to override the default Header title?

   <Stack.Screen options={{title:'My Personal Diary'}} name="Home" component={Home} />

How to update header dynamically based on some props?

<Stack.Screen name="Profile" options={(navigation)=>{
   return {
	title:navigation.route.params.name || 'Your Header'
   }
}} component={Profile} />

eg:
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator } from 'react-native'
import { useState, useEffect } from "react";

const Stack = createNativeStackNavigator();

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}

const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}

//Screens 
//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Posts')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Posts" onPress={onMove} />
    </View>
}

const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {
    const { title, body } = props.route.params
    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen options={{ title: 'MyHome' }} name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen options={(navigation) => {

                //return screen object 
                return {
                    title: navigation.route.params.title || 'Profile Details'
                }

            }} name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
....................................................................................
				Header styles
....................................................................................


There are three key properties to use when customizing the style of your header: headerStyle, headerTintColor, and headerTitleStyle.

headerStyle: a style object that will be applied to the View that wraps the header. If you set backgroundColor on it, that will be the color of your header.

headerTintColor: the back button and title both use this property as their color.

headerTitleStyle: if we want to customize the fontFamily, fontWeight and other Text 
Style properties for the title, we can use this to do it.

import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator } from 'react-native'
import { useState, useEffect } from "react";

const Stack = createNativeStackNavigator();

const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}

const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}

//Screens 
//Screens 
const HomeScreen = props => {
    const { navigation: { navigate } } = props
    const onMove = () => {
        navigate('Posts')
    }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        <Button title="Posts" onPress={onMove} />
    </View>
}

const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {
    const { title, body } = props.route.params
    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}

const App = props => {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen options={{
                title: 'MyHome', headerStyle: {
                    backgroundColor: 'light blue'
                }
            }} name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen options={(navigation) => {
                //return options  object 
                return {
                    title: navigation.route.params.title || 'Profile Details',
                    headerStyle: {
                        backgroundColor: 'pink'
                    },
                    headerTintColor: 'blue',
                    headerTitleStyle: {
                        fontWeight: 'bold',
                        fontFamily: 'fantasy'
                    }
                }

            }} name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}
export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})

....................................................................................
			 Screen Options vs options and Header Button
....................................................................................

Suppose i want to share common style for all screens,Screen options are used to set common styles for all screens.

       <Stack.Navigator screenOptions={{
            headerStyle: {
                backgroundColor: '#f4511e'
            },
            headerTintColor: 'blue',
            headerTitleStyle: {
                fontWeight: 'bold'
            }
        }}>


import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { StyleSheet, View, Text, Button, TouchableHighlight, FlatList, ActivityIndicator, Alert } from 'react-native'
import { useState, useEffect } from "react";


//create Stack Object
const Stack = createNativeStackNavigator();


const Error = props => {
    return <>
        <Text>{props.error}</Text>
    </>
}
const Spinner = props => {
    return <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1 }}>
        <ActivityIndicator size='large' color="#0000ff" />
    </View>
}
const Posts = props => {
    let initalState = {
        isLoaded: false,
        items: [],
        error: null
    }
    const [posts, setPosts] = useState(initalState)

    console.log('Posts props')
    console.log(props)

    async function fetchPosts() {
        try {
            const url = 'https://jsonplaceholder.typicode.com/posts'
            const values = await (await fetch(url)).json()
            setPosts({ ...posts, isLoaded: true, items: posts.items.concat(values) })
        }
        catch (err) {
            setPosts({ ...posts, isLoaded: true, error: err })
        }
    }
    //useEffect : ComponentDidMount 
    useEffect(() => {
        setTimeout(() => {
            fetchPosts()
        }, 5000)
    }, [])

    const onSelect = (item) => {
        props.navigation.navigate('PostsDetails', item)
    }

    const { error, isLoaded, items } = posts
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <FlatList
            data={items}
            keyExtractor={item => item.id}
            renderItem={({ item }) => {
                return <TouchableHighlight activeOpacity={0.4} underlayColor='yellow' onPress={() => { onSelect(item) }} >
                    <View>
                        <Text style={styles.item}>{item.title}</Text>
                    </View>
                </TouchableHighlight>
            }}
        />
    }

}




//Screens 
const HomeScreen = props => {
    // const { navigation: { navigate } } = props
    // const onMove = () => {
    //     navigate('Posts')
    // }
    return <View style={styles.container}>
        <Text style={{
            fontSize: 40,
        }}>Home Screen</Text>
        {/* <Button title="Posts" onPress={onMove} /> */}
    </View>
}
const PostScreen = props => {
    return <>
        <Posts navigation={props.navigation} />
    </>
}

const PostsDetailScreen = props => {

    const { title, body } = props.route.params

    return <View style={styles.container}>
        <Text style={{ fontSize: 25, color: 'blue' }}>{title}</Text>
        <Text style={{ fontSize: 20, color: 'red' }}>{body}</Text>
    </View>
}



const App = props => {
    return <NavigationContainer>
        <Stack.Navigator screenOptions={{
            headerStyle: {
                backgroundColor: '#f4511e'
            },
            headerTintColor: 'blue',
            headerTitleStyle: {
                fontWeight: 'bold'
            }
        }}>
            <Stack.Screen options={(navigation) => {
                console.log('inside navigation')
                console.log(navigation)
                const onMove = () => {
                    Alert.alert('clicked')
                    //navigation.navigate('Posts')
                }
                return {
                    title: 'My Posts App',
                    headerRight: () => {
                        return <Button title="Posts" onPress={onMove} />
                    }
                }
            }} name="Home" component={HomeScreen} />
            <Stack.Screen name="Posts" component={PostScreen} />
            <Stack.Screen options={(navigation) => {
                return {
                    title: navigation.route.params.title || 'Your Blog',
                    headerTintColor: 'blue',
                    headerTitleStyle: {
                        fontWeight: 'bold'
                    }
                }
            }} name="PostsDetails" component={PostsDetailScreen} />
        </Stack.Navigator>
    </NavigationContainer>
}


export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'lightblue',
        justifyContent: 'center',
        alignItems: 'center'
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        fontWeight: 'bold',
        color: '#000'

    },
    text: {
        fontSize: 30,
        textAlign: 'center',
        color: '#000'
    }
})
....................................................................................
			  Tab Navigation
...................................................................................

Tab Naviation:

Types of Tabs
1.TopTab
2.BottomTab
3.MaterialBottomTab | MaterialTopTab

npm i @react-navigation/material-top-tabs
npm i @react-navigation/bottom-tabs
npm i @react-navigation/material-bottom-tabs

npm i react-native-pager-view


Material Top tab Navigation:

import { NavigationContainer } from "@react-navigation/native";
import { View, StyleSheet, Text } from 'react-native'
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";

const Tab = createMaterialTopTabNavigator();

const FeedScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>FeedScreen</Text>
    </View>
}
const NotificationsScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>NotificationsScreen</Text>
    </View>
}
const ProfileScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>ProfileScreen</Text>
    </View>
}
function MyTabs() {
    return <Tab.Navigator initialRouteName="Feed" screenOptions={{
        tabBarActiveTintColor: '#e91e63',
        tabBarLabelStyle: {
            fontSize: 12,
            fontWeight: 'bold',
        },
        tabBarStyle: {
            backgroundColor: 'powderblue'
        }
    }}>
        <Tab.Screen name="Feed" component={FeedScreen} />
        <Tab.Screen name="Notifications" component={NotificationsScreen} />
        <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
}

function App() {
    return <NavigationContainer>
        <MyTabs />
    </NavigationContainer>
}

export default App;
....................................................................................
Material Bottom Tab Navigation:
.....................................................................................

import { NavigationContainer } from "@react-navigation/native";
import { View, Text } from 'react-native'
import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';


const Tab = createMaterialBottomTabNavigator();

const FeedScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>FeedScreen</Text>
    </View>
}
const NotificationsScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>NotificationsScreen</Text>
    </View>
}
const ProfileScreen = () => {
    return <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text>ProfileScreen</Text>
    </View>
}

function MyTabs() {
    return (
        <Tab.Navigator>
            <Tab.Screen name="Feed" component={FeedScreen} options={{
                tabBarLabel: 'Feed',
                tabBarIcon: ({ color }) => (
                    <MaterialCommunityIcons name="home" color={color} size={26} />
                ),
            }} />
            <Tab.Screen name="Notification" component={NotificationsScreen} />
            <Tab.Screen name="Profiles" component={ProfileScreen} />
        </Tab.Navigator>
    );
}


function App() {
    return <SafeAreaProvider>
        <NavigationContainer>
            <MyTabs />
        </NavigationContainer>
    </SafeAreaProvider>
}

export default App;

....................................................................................
				Tab + Stack Navigation
...................................................................................
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { View, Text, StyleSheet, Button } from 'react-native';
import { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';
//create tab:
const Tab = createMaterialBottomTabNavigator();
const Stack = createNativeStackNavigator();


const Messages = props => {
    const { navigation } = props;
    return <View style={styles.container}>
        <Text>Messages Screen</Text>
        <Button title="go to Settions" onPress={() => {
            navigation.navigate('Settings')
        }} />
    </View>
}
const Feed = props => {
    return <View style={styles.container}>
        <Text>Feed Screen</Text>
    </View>
}
const Settings = props => {
    return <View style={styles.container}>
        <Text>Settings Screen</Text>
    </View>
}
const Home = props => {
    return <Tab.Navigator>
        <Tab.Screen name="Messages" component={Messages} />
        <Tab.Screen name="Feed" component={Feed} />
    </Tab.Navigator>
}

function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen
                name="Home"
                component={Home}
                options={{ headerShown: false }}
            />
            <Stack.Screen name="Settings" component={Settings} />
        </Stack.Navigator>
    </NavigationContainer>

}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
.....................................................................................

import 'react-native-gesture-handler';

import {View} from "react-native"
import { NavigationContainer } from "@react-navigation/native";
import { createDrawerNavigator } from '@react-navigation/drawer';
import { Text } from 'react-native-paper';

const Drawer = createDrawerNavigator();

const Feed = () => {
    return <View style={{ flex: 1 }}>
        <Text>Feed </Text>
    </View>
}

const Article = () => {
    return <View style={{ flex: 1 }}>
        <Text>Article </Text>
    </View>
}
function MyDrawer() {
    return (
        <Drawer.Navigator>
            <Drawer.Screen name="Feed" component={Feed} />
            <Drawer.Screen name="Article" component={Article} />
        </Drawer.Navigator>
    );
}
function App() {
    return <NavigationContainer>
        <MyDrawer />

    </NavigationContainer>

}

export default App;
.....................................................................................
			    Device features
.....................................................................................

React Native core does not have any component or api to talk with device features
such as location,camera,network etc...

We have to go with third party libs

1.https://reactnative.directory/

2.Expo Framework.

Expo framwork offers most of the device specific components and apis.

if you want to use expo components inside react native cli based projects are not stright forward.
we need to lot of configuration.


Porject Work flow:
...................

I am going to integrate expo components into react native cli project.

Expo Location
     A library that provides access to reading geolocation information, polling current location or subscribing location update events from the device.

Steps:
1.create react native project using native cli.

https://docs.expo.dev/bare/installing-expo-modules/

2.Installing expo modules into bare react native project

1.Automatic installation
   It is suitable for only mac operating system

2.Manual installation
   It is suitable for windows work flow.

Windows:

2.1.npm install expo

Configuration for Android:

android/src/main/java/com/myapp/MainActivity.kt

package com.myapp
import expo.modules.ReactActivityDelegateWrapper
import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
   * which allows you to enable New Architecture with a single boolean flags [fabricEnabled]
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate =
     
      ReactActivityDelegateWrapper(this, BuildConfig.IS_NEW_ARCHITECTURE_ENABLED, DefaultReactActivityDelegate(this, mainComponentName, fabricEnabled))
}

Note:
 MainApplication.kt file we dont need to configure, the reason, latest reactive native project does internally.

android/settings.gradle.

apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesSettingsGradle(settings)
include ':app'
includeBuild('../node_modules/@react-native/gradle-plugin')
 
apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle")
useExpoModules()


Metro configuration

metro.config.js

const { getDefaultConfig } = require('expo/metro-config');
const { mergeConfig } = require('@react-native/metro-config');


android/build.gradle

    // Bundle with Expo CLI
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}
...................................................................................
				Expo Location
...................................................................................

Steps:

1.npx expo install expo-location

2.Adding permission in app.json
{
  "name": "NativeFeatures",
  "displayName": "NativeFeatures",
  "expo": {
    "plugins": [
      [
        "expo-location"
      ]
    ]
  }
}

3.Coding
import { Image, StyleSheet, Platform, View, Text } from 'react-native';
import * as Location from 'expo-location'
import { useEffect, useState } from 'react';

const MyLocation = () => {
    const [location, setLocation] = useState(null)
    const [errorMsg, setErrorMsg] = useState(null)

    //write code to get current locaiton
    async function getLocation() {
        //request device permisison
        const { status } = await Location.requestForegroundPermissionsAsync()
        if (status !== 'granted') {
            setErrorMsg("Permission Denined to access location")
            return
        }
        let location = await Location.getCurrentPositionAsync({})
        setLocation(location)

    }

    useEffect(() => {
        getLocation()
    }, [])

    let text = 'Location is loading...'

    if (errorMsg) {
        text = errorMsg
    } else if (location) {
        text = JSON.stringify(location)
    }
    return <View>
        <Text style={{ fontSize: 20, color: 'blue' }}>{text}</Text>
    </View>

}


function App() {
    return <View style={{ flex: 1, alignContent: 'center', justifyContent: 'center' }}>
        <MyLocation></MyLocation>
    </View>
}

export default App;
...................................................................................
			 Expo -Video + audio
...................................................................................

.....................................................................................
			  Expo-Av : video +audio


install expo-av

npx expo install expo-av


app.json
   "expo": {
      "plugins": [
        "expo-location",
        "expo-av"
      ]
    },

useRef:
 useRef is a React Hook that lets you reference a value that’s not needed for rendering.

In React how to refer dom element?

For eg i have text box i need to refer text box inside code
<text onInput={onGet}>

=>Inside event listener

const onGet = evt=>{ 
  let textbox=evt.target 
} 

here textbox is just variable holds text element inside event listener.
now we can access all properties of text box like value....

=>Using traditional ref variable

 <input ref={myRef} />

=>Using reference -useRef

Without event object , you can access text box value 
 
const inputRef = useRef(initialValue)

<input ref={inputRef} />;


//Video player and audio.

import { Video } from 'expo-av';
import { useRef, useState, useEffect } from 'react'
import { Button, View ,StyleSheet } from 'react-native';

function App() {
    const video = useRef(null)
    const [status, setStatus] = useState({})

    return <View style={styles.container}>
        <Video
            ref={video}
            style={styles.video}
            source={{
                uri: 'http://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
            }}
            useNativeControls
            resizeMode='contain'
            isLooping
            onPlaybackStatusUpdate={status => setStatus(() => status)}
        />
        <View>
            <Button title={status.isPlaying ? 'Pause' : 'Play'} onPress={()=>{
                status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
            }}/>
        </View>
    </View>

}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
    buttons: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    video: {
        alignSelf: 'center',
        width: 320,
        height: 200
    }
});
export default App;

...................................................................................
				File System
....................................................................................

npx expo install  expo-file-system
npx expo install expo-sharing

app.json
   "expo": {
      "plugins": [
        "expo-location",
        "expo-av",
        "expo-filesystem",
        "expo-sharing"
      ]
    }

import { StyleSheet, Button, View, Platform } from 'react-native';
import * as FileSystem from 'expo-file-system';
import { shareAsync } from 'expo-sharing';

export default function App() {
    const downloadFromUrl = async () => {
        const filename = "small.mp4";
        const result = await FileSystem.downloadAsync(
            'http://techslides.com/demos/sample-videos/small.mp4',
            FileSystem.documentDirectory + filename
        );
        console.log(result);

        save(result.uri, filename, result.headers["Content-Type"]);
    };



    const save = async (uri, filename, mimetype) => {
        if (Platform.OS === "android") {
            const permissions = await FileSystem.StorageAccessFramework.requestDirectoryPermissionsAsync();
            if (permissions.granted) {
                const base64 = await FileSystem.readAsStringAsync(uri, { encoding: FileSystem.EncodingType.Base64 });
                await FileSystem.StorageAccessFramework.createFileAsync(permissions.directoryUri, filename, mimetype)
                    .then(async (uri) => {
                        await FileSystem.writeAsStringAsync(uri, base64, { encoding: FileSystem.EncodingType.Base64 });
                    })
                    .catch(e => console.log(e));
            } else {
                shareAsync(uri);
            }
        } else {
            shareAsync(uri);
        }
    };

    return (
        <View style={styles.container}>
            <Button title="Download From URL" onPress={downloadFromUrl} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});

