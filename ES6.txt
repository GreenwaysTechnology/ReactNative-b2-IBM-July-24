			 ES 6 - Java script
.....................................................................................

What is Javascript?

 Java script is object based, functional style programming language.

What is Object based


Object Orientation:
..................

 Object orientation is style of architecting apps.

IS there is any other styles?

1.Producure oriented style
2.Object oriented style
3.Functional programming style

Object oriented Programming:  
  Collection of object oriented principles.

OO Principles:
..............
1.Abstraction - Describes how to collect and analysis req -class,interface
2.Encaspulation - Tells how to share code and how to not share code
3.Modularity - How to break the code into files and folders - namepaces,packages
4.Hierachy - how to establish realtionship among classes - is-a(inheritance),has-a(dependency)
5.Typing - Data Types - Strong typing,weak Typing- Polymorphism (only for                         polymorphism)
 
  Strong Typing:
    int a =10;
   here a's type is verified during compile time
    a="hello" 
   here compiler catches error.
  The type of variable is verified during compile time

 var a =10
   here a's type is not verifed during compile time rather runtime.
  These types are called weak typed.
.................
6.Concurrency -  Processing represenation - threads
7.Persistancy - Storage

C#,java,kotlin,swift is object oriented language.

if any programming language follows oo 1 to 5 principles , those languages called as "Object oriented Language".

if any programming language does not follow oo 1 to 5 principles completly or partially , those languages called as "Object based Language".

Functional Programming:
  It is also style of programming..

SOme programming languages follows single style - c++ - object oriented language
Some programming languages follows multiple style - hybrid language.

JS is hybrid language.
  It supports both object based and functional language.

Javascript language runtime Environment:
........................................

Life cycle of programming

java
1.source code  - hello.java -english
2.compiled code - hello.class - assembly
...............................Dev Cycle
3.Excutable code  -----Runtime - jvm

JS:
1.source code - hello.js 
    |
  compiled --->

JS Runtime:
  It is program which is responsible for loading,parsing,compiling,running js code.

Where is js runtime?

  Every browser has embeded js runtime.

Chrome-V8
Edge - Chakra
Firefox - Spider Monkey
 
 Js engine is available outside browser too, which is called "Node.js"
 
JS engine is available in mobile -via React Native -Hermes
...................................................................................
			 language
...................................................................................

Versions:
 Js language was created by Netscap communications on 1995.

 After javascript language created, the language was submitted to standard body called "ECMA" international.

After that Js was called as ECMA Script or ES.

After submission, the language was standarized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
 still growing but up to es 7 is stable and in production....
etc.....

Javascript learning path(ES6):
..............................
1.Language fundamentals
2.Functions 
3.Objects

1.Language fundamentals
 ->Variables
 ->Literals
 ->Type Systems


1.Language fundamentals:

variables,type system,values(literals)

var,let,const

literals:(values)

  literal   - type
....................
  string    - string
  number    - number
  boolean   - boolean
  undfined   - undefined
  NaN       - number
  Infinity  - number
  function  - function
  object    - object
  null      - object

type system;

1.string
2.number
3.object
4.boolean
5.undefined
6.function
.....................................................................................
			    
Software setup:
1.node.js
2.vs code
3.Jdk 17
4.Android Studio
.....................................................................................

Project Setup:
..............

G:\IBM\2024\July\ReactNative-b2>mkdir es6apps
G:\IBM\2024\July\ReactNative-b2>cd es6apps

G:\IBM\2024\July\ReactNative-b2\es6apps>mkdir src

G:\IBM\2024\July\ReactNative-b2\es6apps>code .

Helloworld
src/index.js
console.log('Hello')

How to test?
 we are going to test using browser, so we need html file.


es6apps
  | 
  src
 |
 index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 apps</title>
</head>
<body>
    <h1>ES6 apps</h1>
    <script src="src/index.js"></script>
</body>
</html>

How to run this file?

 in order to we web server.
 vs code offers embeded webserver , that needs to be installed.

vs code--->Extension---live server---->click --->install-->restart vs code.

After installing live server, right click on html, lanuch server along with index.html

After lanuching, right click on browser,click inspect, go to console.

....................................................................................
....................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types

//strings

let firstName="Subramanian"
let lastName='Murugan'
//back tick and string interpolation: es 6 feature
//let fullName = firstName + lastName
let fullName =`${firstName} ${lastName}`
console.log("Your Name " + fullName)
console.log("Your Name",fullName)
console.log(`Your name ${fullName}`)


Numbers:
 only type called number 
 64 bit aka double.

//numbers
let qty = 10
let price = 10.45
let total = qty * price
console.log(`Total ${total}`)


Booleans:
 true or false

//true or false 

//boolean
let isLoggedIn = true
let isDisabled = false

console.log(`Is LoggedIn ${isLoggedIn} Is Disabled ${isDisabled}`)


Undefined:
 Variable is declared without any valid value.
//undefined

let qty;
console.log(`Quantity ${qty}`)

NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix beacuse is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let qty
let price=100
let total = qty * price 

console.log(`Qty ${qty} Price ${price} Total ${total}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)
..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */




let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}
myvar = NaN
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`False : MyVar is ${myvar}`)
}

....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 100
let b = 100
if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 100
let y = "100"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}

if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}
.....................................................................................
			 const
....................................................................................

let vs const

const 
 readonly,
 we cant reinitalize the variable

let a=10
console.log(`a value is ${a}`)
a=900
console.log(`a value is ${a}`)

const b=100;
console.log(`b value is ${b}`)
//you cant reinitalize
b=900
.....................................................................................
		.....................................................................................
			   Functions
....................................................................................
functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values


//function declaration
function sayHello(){
    console.log('hello')
}
//function invocation
sayHello()

Function args and parameters:
..............................


//default arg
function sayHello(name = 'Default Name') {
    console.log('Your name is ', name)
}
//with parameter
sayHello('Subramanian')
//without parameter : undefined will be passed as default value
sayHello()

function multiply(a = 0, b = 0) {
    let c = a * b
    console.log('Result is ', c)
}
multiply(10, 10)
multiply()

....................................................................................
			 Return values
....................................................................................

//default arg
function sayHello(name = 'Default Name') {
   return name;
}
//with parameter
console.log(sayHello('Subramanian'))
//without parameter : undefined will be passed as default value
console.log(sayHello())

function multiply(a = 0, b = 0) {
    let c = a * b
    return c 
}
let res= multiply(10, 10)
console.log(res)
....................................................................................
			  Functional Programming
....................................................................................
According to functional programming, function is just value like numbers,strings.

since function is value can be assigned to a variable.

If you assign the function with variable, then that function can be called with variableName.

if you declare function with variables, without function name called "Anonymous function".

//function literal:

//let is keyword
//a is variable
//10 is literal and its type is number
let a = 10


//let is keyword
//hello is variable
//function(){} -is value: function itself is value
//function has no any name; anonymous function
let hello = function () {
    console.log('Hello')
}
//hello variable can be used to call function
hello()

Anonymous functions args,returns:
................................

let add = function (a = 0, b = 10) {
    return a + b
}
console.log(add(10,10))
console.log(add())
			Higher order functions
....................................................................................

1.Passing function as parameter
2.Returning function 

1.Passing function as parameter

Use case : simple function

//
//a =x, b=y
function add(a, b) {
    return a + b;
}
let x = 10;
let y = 20;
console.log(add(x, y))
console.log(add(10, 10))

//higher order fun
//greet = hello =  function(){}
function sayGreet(greet) {
    greet()
}
let hello = function () {
    console.log('hello')
}
sayGreet(hello)

//passing hardcoded function
sayGreet(function () {
    console.log('welcome')
})



Use case :passing parameters and return values from hof:
function sayGreet(greet) {
    let status = greet('welcome')
    console.log(status)
}
let hello = function (message) {
    console.log(message)
    return 'processed'
}
sayGreet(hello)

//passing hardcoded function
sayGreet(function (message) {
    console.log(message)
    return "processed"
})
..........................
Use case : passing paramers with some logic - more functions as parameter.
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxx

function login(userName, password, resolve, reject) {
    if (userName === 'admin' && password === 'admin') {
        resolve('login success')
    } else {
        reject('login failed')
    }

}

login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})

login('foo', 'bar', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
....................................................................................
			Higher order functions in ES 6
			   (Arrow Functions)

Arrow functions are just replace of old(es5) anonymous function syntax.

Arrow functions looks very simple ,less code
....................................................................................
			Higher order functions
....................................................................................

1.Passing function as parameter
2.Returning function 

1.Passing function as parameter

Use case : simple function

//
//a =x, b=y
function add(a, b) {
    return a + b;
}
let x = 10;
let y = 20;
console.log(add(x, y))
console.log(add(10, 10))

//higher order fun
//greet = hello =  function(){}
function sayGreet(greet) {
    greet()
}
let hello = function () {
    console.log('hello')
}
sayGreet(hello)

//passing hardcoded function
sayGreet(function () {
    console.log('welcome')
})



Use case :passing parameters and return values from hof:
function sayGreet(greet) {
    let status = greet('welcome')
    console.log(status)
}
let hello = function (message) {
    console.log(message)
    return 'processed'
}
sayGreet(hello)

//passing hardcoded function
sayGreet(function (message) {
    console.log(message)
    return "processed"
})
..........................
Use case : passing paramers with some logic - more functions as parameter.

function login(userName, password, resolve, reject) {
    if (userName === 'admin' && password === 'admin') {
        resolve('login success')
    } else {
        reject('login failed')
    }
}

login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})

login('bar', 'foo', function (status) {
    console.log('login success')
}, function (err) {
    console.log('login failed')
})
.....................................................................................
	   Higher order function - return  function from another function
.....................................................................................

Use case : Nested function:


function makeCoffee() {
    //nested fun
    function start() {
        console.log('starting')
    }
    //calling nested fun
    start()
}
makeCoffee()

Use case : calling nested function : hof

// function makeCoffee() {
//     function start() {
//         console.log('starting')
//     }
//     return start

// }
// function makeCoffee() {
//     return function start() {
//         console.log('starting')
//     }
//     //return start

// }
// function makeCoffee() {
//     return function () {
//         console.log('starting')
//     }
//     //return start

// }
// // let myfun = makeCoffee()
// // myfun()
// makeCoffee()()

function makeCoffee() {
    return function (status) {
        console.log(status)
    }
    //return start

}
// let myfun = makeCoffee()
// myfun()
makeCoffee()('starting')
....................................................................................
			Higher order functions in ES 6
			   (Arrow Functions)

Arrow functions are just replace of old(es5) anonymous function syntax.

Arrow functions looks very simple ,less code


Use case: simple arrow

//es 5 style
let hello = function () {
    console.log('hello')
}
hello()

//es 6 arrow style
let hai = () => {
    console.log('hai')
}

hai()

Use case: parameters,arg,no default arg

//code refactoring

//if function body has only one line of code, we can remove {}
// let hai = () => {
//     console.log('hai')
// }
let hai = () => console.log('hai')
hai()

//parameters
let add = (a = 0, b = 0) => {
    let c = a + b
    console.log(c)
}
add(10, 10)
//return 
// let multiple = (a = 0, b = 0) => {
//     return a * b 
// }
// console.log(multiple(10,10))

//function having only return, then we can remove {} and return statement
let multiple = (a = 0, b = 0) => a * b
console.log(multiple(10, 10))


//if function takes single arg, no default value,return the same; we can remove {},return

let getStock = value => value

console.log(getStock(34))
..................................................................................
			 Arrow and higher order function
.................................................................................

//passing function as parameter

let login = (userName, password, resolve, reject) => {
    if (userName === 'admin' && password === 'admin') {
        resolve('login success')
    } else {
        reject('login failed')
    }
}
// login('admin', 'admin', (status) => {
//     console.log(status)
// }, (err) => {
//     console.log(err)
// })
login('admin', 'admin', status => console.log(status), err => console.log(err))
		.....................................................................................
				  Objects
.....................................................................................			
Objects can be created in two ways

1.constructors pattern
   es 5 functions 
   es 6 classes
2.literal pattern

//class declaration

class Employee {
    //instance variables
    id = 1
    name = 'Subramanian'

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }
}

//create instance

//let is keyword
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee()
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.id}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)
................................................................................

State Initalization

1.inside class 
2.inside constructor
3.outside class- after object creation.

//class declaration

class Employee {
    //inside class
    id = 1
    name = 'Subramanian'

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }
}

//create instance

//let is keyword
//emp is reference variable
//new is operator
//Employee() is constructor call
let emp = new Employee()
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.id}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)


constructor parameter:

class Employee {
    id
    name
    constructor(id = 1, name = 'Subramanian') {
        this.id = id
        this.name = name
    }

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }
}
let emp = new Employee()
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.id}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)


emp= new Employee(2,'Ram')
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.id}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)

after object creation:

class Employee {
    id
    name
    constructor(id = 1, name = 'Subramanian') {
        this.id = id
        this.name = name
    }

    //methods
    calculateSalary() {
        return 100
    }
    calculateTax = () => {
        return 10
    }
}
let emp = new Employee()
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)


emp = new Employee(2, 'Ram')
console.log(emp)

console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)

emp = new Employee()

emp.id = 90
emp.name = 'John'

console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.calculateSalary()}`)
console.log(`Tax ${emp.calculateTax()}`)
.....................................................................................
			 Hierachy
.....................................................................................

1.HAS-A 
2.IS-A -  inheritance

Has-a:
class Address {
    city
    constructor(city = 'city') {
        this.city = city
    }
}
class Employee {
    id
    name
    address
    constructor(id = 0, name = 'name', address = new Address('city')) {
        this.id = id
        this.name = name
        this.address = address
    }
}
let emp = new Employee(1, 'Subramaian', new Address('coimbatore'))
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`city ${emp.address.city}`)

IS-A inheritance
................
class Account {
    constructor() {
        console.log('account')

    }
    deposit() {
        return 100
    }
}
class SavingsAccount extends Account {
    constructor() {
        super()
        console.log('savings account')
        
    }
    deposit() {
        return 1000 + super.deposit()
    }
}
let sb = new SavingsAccount()
console.log(sb.deposit())

Note:
 mixin
 Typescript - interfaces
....................................................................................
				literal 
....................................................................................

No class,function


syntax:

let variable = {
  key:value,
  key:value
}

//
let employee = {
    id: 1,
    name: 'Subramanian'
}
console.log(`Id ${employee.id}`)
console.log(`Name ${employee.name}`)

has-a/nested object
let employee = {
    id: 1,
    name: 'Subramanian',
    //has-a
    address: {
        city: 'Coimbatore'
    }
}
console.log(`Id ${employee.id}`)
console.log(`Name ${employee.name}`)
console.log(`Name ${employee.address.city}`)

Javascripts supports lot of built in objects
.............................................

1.Browser related objects
 window,document,history,sessionStorage,localStorage etc...

2.Plain objects/POJOs

1.Object - Super Most parent object
2.Array - To implement ds in js - List
3.JSON  - Json Parser Object
4.String
5.Number
6.Boolean
7.Math
etc....

Array:
......
  Array is object which holds any type of data including other arrays.
Since array object has many methods.

//array can hold any values- numbers,strings,objects, even another array

let names = ['subu', 'ram', 'chandan']

names.forEach(item => console.log(item))

let users = [
    { id: 1, name: 'a' },
    { id: 2, name: 'b' },
    { id: 3, name: 'c' },
    { id: 4, name: 'd' },
]
users.forEach(item => console.log(item.id, item.name))

const res = users.map(item => {
    return item.name.toUpperCase()
})
console.log(res)

const result = users.filter(item => item.name === 'a')
console.log(result)

const user = users.find(item => item.name === 'a')
console.log(user)

const savedUser = users.concat({ id: 4, name: 'abc' })
console.log(savedUser)

Reference:
https://www.w3schools.com/jsref/jsref_find.asp
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
..................................................................................
			Object Destructuring
...................................................................................
//object destructuring: es 6 feature

// function printEmployee(emp) {
//     console.log(`Id : ${emp.id}`)
//     console.log(`Name : ${emp.name}`)
//     console.log(`City : ${emp.address.city}`)
// }

// function printEmployee(emp) {
//     //destructure
//     const { id, name, address } = emp
//     console.log(`Id : ${id}`)
//     console.log(`Name : ${name}`)
//     console.log(`City : ${address.city}`)
// }


// function printEmployee(emp) {
//     //destructure
//     const { id, name, address: { city } } = emp
//     console.log(`Id : ${id}`)
//     console.log(`Name : ${name}`)
//     console.log(`City : ${city}`)
// }

// function printEmployee({ id, name, address: { city } }) {
//     console.log(`Id : ${id}`)
//     console.log(`Name : ${name}`)
//     console.log(`City : ${city}`)
// }
const printEmployee = ({ id, name, address: { city } }) => {
    console.log(`Id : ${id}`)
    console.log(`Name : ${name}`)
    console.log(`City : ${city}`)
}
let employee = {
    id: 1,
    name: 'Subramanian',
    address: {
        city: 'Coimbatore'
    }

}
printEmployee(employee)
////////////////////////////////////////////////////////////////////////////////////////

//return object and destructuring

// function getStock() {
//     return {
//         id: 1,
//         symbol: 'google',
//         qty: 100,
//         price: 1000
//     }
// }
// console.log(getStock())


//dynamic object properties
// function getStock(id = 1, symbol = 'google', qty = 0, price = 0) {
//     return {
//         id: id,
//         symbol: symbol,
//         qty: qty,
//         price: price
//     }
// }
// console.log(getStock(2, 'meta', 3, 3445))
// console.log(getStock())

//apply descturing syntax
// function getStock(id = 1, symbol = 'google', qty = 0, price = 0) {
//     //left:right is same
//     //key:value is same
//     //you can descture, make it as one
//     return {
//         id,
//         symbol,
//         qty,
//         price
//     }
// }
// console.log(getStock(2, 'meta', 3, 3445))
// console.log(getStock())


// const getStock = (id = 1, symbol = 'google', qty = 0, price = 0) => {
//     return {
//         id,
//         symbol,
//         qty,
//         price
//     }
// }

const getStock = (id = 1, symbol = 'google', qty = 0, price = 0) => ({
    id,
    symbol,
    qty,
    price
})


console.log(getStock(2, 'meta', 3, 3445))
console.log(getStock())
























